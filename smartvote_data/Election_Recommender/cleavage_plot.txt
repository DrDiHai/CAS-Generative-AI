import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sqlite3
from scipy.stats import pearsonr
from party_styles import party_styles

# Connect to SQLite database
connection = sqlite3.connect("staenderat.db")
query = """
SELECT
	a.ID_candidate,
    CAST(k.cleavage_1 AS REAL) AS cleavage_1,
    CAST(k.cleavage_2 AS REAL) AS cleavage_2,
    CAST(k.cleavage_3 AS REAL) AS cleavage_3,
    CAST(k.cleavage_4 AS REAL) AS cleavage_4,
    CAST(k.cleavage_5 AS REAL) AS cleavage_5,
    CAST(k.cleavage_6 AS REAL) AS cleavage_6,
    CAST(k.cleavage_7 AS REAL) AS cleavage_7,
    CAST(k.cleavage_8 AS REAL) AS cleavage_8,
	AVG(a.NormalizedRank) [AvgRank],
    REPLACE(REPLACE(k.party_short, 'Ãœbrige', 'Other'), 'Parteilos', 'Independent') [Party]
FROM 
ElectionRecommendationNormalized a
LEFT JOIN Kandidat k ON k.ID = a.ID_candidate
--WHERE Party = "EAG-LUP"
GROUP BY a.ID_Candidate
"""

cleavage_to_name_dict = {
    "cleavage_1": "Open Foreign Policy",
    "cleavage_2": "Liberal Economy",
    "cleavage_3": "Restrictive Financial Policy",
    "cleavage_4": "Law & Order",
    "cleavage_5": "Restrictive Immigration Policy",
    "cleavage_6": "Extended Environmental Protection",
    "cleavage_7": "Extended Welfare State",
    "cleavage_8": "Liberal Society",
}

# Load query results into pandas DataFrame
data = pd.read_sql_query(query, connection)
data = data.dropna()
print(data)

# List of cleavage columns
cleavages = [f"cleavage_{i}" for i in range(1, 9)]

results = []

for cleavage in cleavages:
    corr, p_value = pearsonr(data[cleavage], data["AvgRank"])
    results.append({"Cleavage": cleavage, "Correlation": corr, "P-Value": p_value})

# Create a DataFrame for the results
results_df = pd.DataFrame(results)

# Display the results
print(results_df)

correlation_matrix = data[cleavages].corr()
print(correlation_matrix)

import matplotlib.pyplot as plt
import seaborn as sns

# Number of cleavages
num_cleavages = len(cleavages)

# Create subplots
fig, axes = plt.subplots(nrows=2, ncols=4, figsize=(16, 8))  # Adjust size for clarity
fig.suptitle("Average Rank vs. Cleavages")
axes = axes.flatten()  # Flatten axes for easy iteration

# Iterate through cleavages and plot
for i, cleavage in enumerate(cleavages):
    for party, style in party_styles.items():
        party_data = data[data["Party"] == party]
        axes[i].scatter(
            party_data[cleavage],
            party_data["AvgRank"],
            color=style["color"],
            marker=style["marker"],
            s=20,  # Adjust marker size (smaller value for smaller symbols)
            alpha=0.7,
            label=party if i == 0 else None,  # Avoid repeated labels in the legend
        )
    axes[i].set_xlabel(cleavage_to_name_dict[cleavage])
    if i in [0, 4]:
        axes[i].set_ylabel("Average Rank")
    axes[i].set_xlim(-0.05, 1.05)  # Set x-axis limits
    axes[i].set_ylim(-0.05, 1.05)  # Set y-axis limits
    axes[i].set_aspect("equal", adjustable="box")  # Ensure square plots
    axes[i].invert_yaxis()  # Reverse the y-axis


# Hide any unused subplots (if cleavages < total axes)
for j in range(num_cleavages, len(axes)):
    axes[j].set_visible(False)

# Add a single legend
handles = [
    plt.Line2D(
        [0],
        [0],
        marker=style["marker"],
        color=style["color"],
        linestyle="",
        label=party,
    )
    for party, style in party_styles.items()
]
legend = fig.legend(
    handles=handles,
    loc="center right",
    title="Parties",
    bbox_to_anchor=(0.95, 0.5),  # Adjust placement
    borderaxespad=0,
    frameon=True,
)

# Adjust layout to leave space for the legend
plt.tight_layout(rect=[0, 0, 0.85, 1])  # Leave space on the right for the legend
plt.show()
